{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as PropTypes from 'prop-types';\nimport { useQuery } from \"../hooks/index.js\";\nexport function Query(props) {\n  var children = props.children,\n      query = props.query,\n      options = __rest(props, [\"children\", \"query\"]);\n\n  var result = useQuery(query, options);\n  return result ? children(result) : null;\n}\nQuery.propTypes = {\n  client: PropTypes.object,\n  children: PropTypes.func.isRequired,\n  fetchPolicy: PropTypes.string,\n  notifyOnNetworkStatusChange: PropTypes.bool,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  pollInterval: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  ssr: PropTypes.bool,\n  partialRefetch: PropTypes.bool,\n  returnPartialData: PropTypes.bool\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,SAAZ,MAA2B,YAA3B;AAIA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,OAAM,SAAUC,KAAV,CACJC,KADI,EAC2C;EAEvC,YAAQ,GAAwBA,KAAK,SAArC;EAAA,IAAUC,KAAK,GAAiBD,KAAK,MAArC;EAAA,IAAoBE,OAAO,UAAKF,KAAL,EAA7B,qBAA6B,CAA3B;;EACR,IAAMG,MAAM,GAAGL,QAAQ,CAACG,KAAD,EAAQC,OAAR,CAAvB;EACA,OAAOC,MAAM,GAAGC,QAAQ,CAACD,MAAD,CAAX,GAA6B,IAA1C;AACD;AAMDJ,KAAK,CAACM,SAAN,GAAkB;EAChBC,MAAM,EAAET,SAAS,CAACU,MADF;EAEhBH,QAAQ,EAAEP,SAAS,CAACW,IAAV,CAAeC,UAFT;EAGhBC,WAAW,EAAEb,SAAS,CAACc,MAHP;EAIhBC,2BAA2B,EAAEf,SAAS,CAACgB,IAJvB;EAKhBC,WAAW,EAAEjB,SAAS,CAACW,IALP;EAMhBO,OAAO,EAAElB,SAAS,CAACW,IANH;EAOhBQ,YAAY,EAAEnB,SAAS,CAACoB,MAPR;EAQhBhB,KAAK,EAAEJ,SAAS,CAACU,MAAV,CAAiBE,UARR;EAShBS,SAAS,EAAErB,SAAS,CAACU,MATL;EAUhBY,GAAG,EAAEtB,SAAS,CAACgB,IAVC;EAWhBO,cAAc,EAAEvB,SAAS,CAACgB,IAXV;EAYhBQ,iBAAiB,EAAExB,SAAS,CAACgB;AAZb,CAAlB","names":["PropTypes","useQuery","Query","props","query","options","result","children","propTypes","client","object","func","isRequired","fetchPolicy","string","notifyOnNetworkStatusChange","bool","onCompleted","onError","pollInterval","number","variables","ssr","partialRefetch","returnPartialData"],"sources":["/Users/tamarphotskhverashvili/Desktop/scandiweb-project/node_modules/@apollo/src/react/components/Query.tsx"],"sourcesContent":["import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { QueryComponentOptions } from './types';\nimport { useQuery } from '../hooks';\n\nexport function Query<TData = any, TVariables = OperationVariables>(\n  props: QueryComponentOptions<TData, TVariables>\n) {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return result ? children(result as any) : null;\n}\n\nexport interface Query<TData, TVariables> {\n  propTypes: PropTypes.InferProps<QueryComponentOptions<TData, TVariables>>;\n}\n\nQuery.propTypes = {\n  client: PropTypes.object,\n  children: PropTypes.func.isRequired,\n  fetchPolicy: PropTypes.string,\n  notifyOnNetworkStatusChange: PropTypes.bool,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  pollInterval: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  ssr: PropTypes.bool,\n  partialRefetch: PropTypes.bool,\n  returnPartialData: PropTypes.bool\n} as Query<any, any>[\"propTypes\"];\n"]},"metadata":{},"sourceType":"module"}