{"ast":null,"code":"import * as PropTypes from 'prop-types';\nimport { useMutation } from \"../hooks/index.js\";\nexport function Mutation(props) {\n  var _a = useMutation(props.mutation, props),\n      runMutation = _a[0],\n      result = _a[1];\n\n  return props.children ? props.children(runMutation, result) : null;\n}\nMutation.propTypes = {\n  mutation: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  refetchQueries: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])), PropTypes.func]),\n  awaitRefetchQueries: PropTypes.bool,\n  update: PropTypes.func,\n  children: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  fetchPolicy: PropTypes.string\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,YAA3B;AAIA,SAASC,WAAT,QAA4B,mBAA5B;AAEA,OAAM,SAAUC,QAAV,CACJC,KADI,EAC8C;EAE5C,SAAwBF,WAAW,CAACE,KAAK,CAACC,QAAP,EAAiBD,KAAjB,CAAnC;EAAA,IAACE,WAAW,QAAZ;EAAA,IAAcC,MAAM,QAApB;;EACN,OAAOH,KAAK,CAACI,QAAN,GAAiBJ,KAAK,CAACI,QAAN,CAAeF,WAAf,EAA4BC,MAA5B,CAAjB,GAAuD,IAA9D;AACD;AAMDJ,QAAQ,CAACM,SAAT,GAAqB;EACnBJ,QAAQ,EAAEJ,SAAS,CAACS,MAAV,CAAiBC,UADR;EAEnBC,SAAS,EAAEX,SAAS,CAACS,MAFF;EAGnBG,kBAAkB,EAAEZ,SAAS,CAACa,SAAV,CAAoB,CAACb,SAAS,CAACS,MAAX,EAAmBT,SAAS,CAACc,IAA7B,CAApB,CAHD;EAInBC,cAAc,EAAEf,SAAS,CAACa,SAAV,CAAoB,CAClCb,SAAS,CAACgB,OAAV,CACEhB,SAAS,CAACa,SAAV,CAAoB,CAACb,SAAS,CAACiB,MAAX,EAAmBjB,SAAS,CAACS,MAA7B,CAApB,CADF,CADkC,EAIlCT,SAAS,CAACc,IAJwB,CAApB,CAJG;EAUnBI,mBAAmB,EAAElB,SAAS,CAACmB,IAVZ;EAWnBC,MAAM,EAAEpB,SAAS,CAACc,IAXC;EAYnBP,QAAQ,EAAEP,SAAS,CAACc,IAAV,CAAeJ,UAZN;EAanBW,WAAW,EAAErB,SAAS,CAACc,IAbJ;EAcnBQ,OAAO,EAAEtB,SAAS,CAACc,IAdA;EAenBS,WAAW,EAAEvB,SAAS,CAACiB;AAfJ,CAArB","names":["PropTypes","useMutation","Mutation","props","mutation","runMutation","result","children","propTypes","object","isRequired","variables","optimisticResponse","oneOfType","func","refetchQueries","arrayOf","string","awaitRefetchQueries","bool","update","onCompleted","onError","fetchPolicy"],"sources":["/Users/tamarphotskhverashvili/Desktop/scandiweb-project/node_modules/@apollo/src/react/components/Mutation.tsx"],"sourcesContent":["import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { MutationComponentOptions } from './types';\nimport { useMutation } from '../hooks';\n\nexport function Mutation<TData = any, TVariables = OperationVariables>(\n  props: MutationComponentOptions<TData, TVariables>\n) {\n  const [runMutation, result] = useMutation(props.mutation, props);\n  return props.children ? props.children(runMutation, result) : null;\n}\n\nexport interface Mutation<TData, TVariables> {\n  propTypes: PropTypes.InferProps<MutationComponentOptions<TData, TVariables>>;\n}\n\nMutation.propTypes = {\n  mutation: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  refetchQueries: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n    ),\n    PropTypes.func\n  ]),\n  awaitRefetchQueries: PropTypes.bool,\n  update: PropTypes.func,\n  children: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  fetchPolicy: PropTypes.string,\n} as Mutation<any, any>[\"propTypes\"];\n"]},"metadata":{},"sourceType":"module"}